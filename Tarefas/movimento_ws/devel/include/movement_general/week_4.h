// Generated by gencpp from file movement_general/week_4.msg
// DO NOT EDIT!


#ifndef MOVEMENT_GENERAL_MESSAGE_WEEK_4_H
#define MOVEMENT_GENERAL_MESSAGE_WEEK_4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_general
{
template <class ContainerAllocator>
struct week_4_
{
  typedef week_4_<ContainerAllocator> Type;

  week_4_()
    : id()
    , pos()
    , vel()
    , torque()  {
      id.assign(0);

      pos.assign(0.0);

      vel.assign(0.0);

      torque.assign(false);
  }
  week_4_(const ContainerAllocator& _alloc)
    : id()
    , pos()
    , vel()
    , torque()  {
  (void)_alloc;
      id.assign(0);

      pos.assign(0.0);

      vel.assign(0.0);

      torque.assign(false);
  }



   typedef boost::array<int16_t, 20>  _id_type;
  _id_type id;

   typedef boost::array<double, 20>  _pos_type;
  _pos_type pos;

   typedef boost::array<double, 20>  _vel_type;
  _vel_type vel;

   typedef boost::array<uint8_t, 20>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::movement_general::week_4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_general::week_4_<ContainerAllocator> const> ConstPtr;

}; // struct week_4_

typedef ::movement_general::week_4_<std::allocator<void> > week_4;

typedef boost::shared_ptr< ::movement_general::week_4 > week_4Ptr;
typedef boost::shared_ptr< ::movement_general::week_4 const> week_4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_general::week_4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_general::week_4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_general::week_4_<ContainerAllocator1> & lhs, const ::movement_general::week_4_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_general::week_4_<ContainerAllocator1> & lhs, const ::movement_general::week_4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_general

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_general::week_4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_general::week_4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_general::week_4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_general::week_4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_general::week_4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_general::week_4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_general::week_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "334b4a0969d7fa87ac249362cafc44f5";
  }

  static const char* value(const ::movement_general::week_4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x334b4a0969d7fa87ULL;
  static const uint64_t static_value2 = 0xac249362cafc44f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_general::week_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_general/week_4";
  }

  static const char* value(const ::movement_general::week_4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_general::week_4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[20] id\n"
"float64[20] pos\n"
"float64[20] vel\n"
"bool[20] torque\n"
;
  }

  static const char* value(const ::movement_general::week_4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_general::week_4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct week_4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_general::week_4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_general::week_4_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_GENERAL_MESSAGE_WEEK_4_H
