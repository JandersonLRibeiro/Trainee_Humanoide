# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_general/week_4.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class week_4(genpy.Message):
  _md5sum = "334b4a0969d7fa87ac249362cafc44f5"
  _type = "movement_general/week_4"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16[20] id
float64[20] pos
float64[20] vel
bool[20] torque"""
  __slots__ = ['id','pos','vel','torque']
  _slot_types = ['int16[20]','float64[20]','float64[20]','bool[20]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pos,vel,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(week_4, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = [0] * 20
      if self.pos is None:
        self.pos = [0.] * 20
      if self.vel is None:
        self.vel = [0.] * 20
      if self.torque is None:
        self.torque = [False] * 20
    else:
      self.id = [0] * 20
      self.pos = [0.] * 20
      self.vel = [0.] * 20
      self.torque = [False] * 20

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_20h().pack(*self.id))
      buff.write(_get_struct_20d().pack(*self.pos))
      buff.write(_get_struct_20d().pack(*self.vel))
      buff.write(_get_struct_20B().pack(*self.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 40
      self.id = _get_struct_20h().unpack(str[start:end])
      start = end
      end += 160
      self.pos = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 160
      self.vel = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 20
      self.torque = _get_struct_20B().unpack(str[start:end])
      self.torque = list(map(bool, self.torque))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.id.tostring())
      buff.write(self.pos.tostring())
      buff.write(self.vel.tostring())
      buff.write(self.torque.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 40
      self.id = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=20)
      start = end
      end += 160
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=20)
      start = end
      end += 160
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=20)
      start = end
      end += 20
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=20)
      self.torque = list(map(bool, self.torque))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20B = None
def _get_struct_20B():
    global _struct_20B
    if _struct_20B is None:
        _struct_20B = struct.Struct("<20B")
    return _struct_20B
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
_struct_20h = None
def _get_struct_20h():
    global _struct_20h
    if _struct_20h is None:
        _struct_20h = struct.Struct("<20h")
    return _struct_20h
