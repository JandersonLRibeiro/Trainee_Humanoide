# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sem_03/srvpersonalizadoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srvpersonalizadoRequest(genpy.Message):
  _md5sum = "34efc34b85cc7534e3dc9b2fd749c78f"
  _type = "sem_03/srvpersonalizadoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[20] id
float32[20] position
bool[20] torque
"""
  __slots__ = ['id','position','torque']
  _slot_types = ['int32[20]','float32[20]','bool[20]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srvpersonalizadoRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = [0] * 20
      if self.position is None:
        self.position = [0.] * 20
      if self.torque is None:
        self.torque = [False] * 20
    else:
      self.id = [0] * 20
      self.position = [0.] * 20
      self.torque = [False] * 20

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_20i().pack(*self.id))
      buff.write(_get_struct_20f().pack(*self.position))
      buff.write(_get_struct_20B().pack(*self.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 80
      self.id = _get_struct_20i().unpack(str[start:end])
      start = end
      end += 80
      self.position = _get_struct_20f().unpack(str[start:end])
      start = end
      end += 20
      self.torque = _get_struct_20B().unpack(str[start:end])
      self.torque = list(map(bool, self.torque))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.id.tostring())
      buff.write(self.position.tostring())
      buff.write(self.torque.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 80
      self.id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=20)
      start = end
      end += 80
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=20)
      start = end
      end += 20
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=20)
      self.torque = list(map(bool, self.torque))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20B = None
def _get_struct_20B():
    global _struct_20B
    if _struct_20B is None:
        _struct_20B = struct.Struct("<20B")
    return _struct_20B
_struct_20f = None
def _get_struct_20f():
    global _struct_20f
    if _struct_20f is None:
        _struct_20f = struct.Struct("<20f")
    return _struct_20f
_struct_20i = None
def _get_struct_20i():
    global _struct_20i
    if _struct_20i is None:
        _struct_20i = struct.Struct("<20i")
    return _struct_20i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sem_03/srvpersonalizadoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class srvpersonalizadoResponse(genpy.Message):
  _md5sum = "87d365418dd3239880b4b6b67e5bba53"
  _type = "sem_03/srvpersonalizadoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool[20] engine_off
"""
  __slots__ = ['engine_off']
  _slot_types = ['bool[20]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       engine_off

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(srvpersonalizadoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.engine_off is None:
        self.engine_off = [False] * 20
    else:
      self.engine_off = [False] * 20

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_20B().pack(*self.engine_off))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 20
      self.engine_off = _get_struct_20B().unpack(str[start:end])
      self.engine_off = list(map(bool, self.engine_off))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.engine_off.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 20
      self.engine_off = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=20)
      self.engine_off = list(map(bool, self.engine_off))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20B = None
def _get_struct_20B():
    global _struct_20B
    if _struct_20B is None:
        _struct_20B = struct.Struct("<20B")
    return _struct_20B
class srvpersonalizado(object):
  _type          = 'sem_03/srvpersonalizado'
  _md5sum = '2aeb07974f134949a54c8d91a307e998'
  _request_class  = srvpersonalizadoRequest
  _response_class = srvpersonalizadoResponse
